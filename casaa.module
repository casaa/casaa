<?php
/**************************************************************
 * Context Ad-Serving and Analytics
 * @file: casaa.module
 * @author(s): geoff.maxey (cntlscrut) + tobby.hagler (tobby)
 * @version: 6.x-2.x-dev
 *************************************************************/

include 'casaa.execute.inc';

/**
 * Implementation of hook_perm()
 * */
function casaa_perm() {
	return array('administer casaa module');
}

/**
 * Implementation of hook_menu()
 * */
function casaa_menu() {
	$items = array();
	
	//Main configuration pages and tabbed items
	$items['admin/build/casaa'] = array(
		'title' => t('CASAA'),
		'description' => t('Administer the CASAA system... and some other stuff.'),
		'page callback' => 'casaa_main_settings_page',
		'access arguments' => array('administer casaa module'),
	);
	$items['admin/build/casaa/mappings'] = array(
		'title' => t('Mappings'),
		'type' => MENU_DEFAULT_LOCAL_TASK,
		'weight' => -10,
	);
	$items['admin/build/casaa/globals'] = array(
		'title' => t('Manage Plug-ins'),
		'page callback' => 'casaa_global_settings_page',
		'access arguments' => array('administer casaa module'),
		'type' => MENU_LOCAL_TASK,
		'weight' => -9,
	);
	
	//ctools menu and callbacks
	$items['admin/build/casaa/mappings/%ctools_js/view'] = array(
		'page callback' => 'casaa_build_tables_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.table.inc',
		'type' => MENU_CALLBACK,
	);
	$items['admin/build/casaa/mappings/%ctools_js/add'] = array(
		'page callback' => 'casaa_add_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.add.inc',
		'type' => MENU_CALLBACK,
	);
	$items['admin/build/casaa/mappings/%ctools_js/edit'] = array(
		'page callback' => 'casaa_add_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.add.inc',
		'type' => MENU_CALLBACK,
	);
	$items['admin/build/casaa/mappings/%ctools_js/delete'] = array(
		'page callback' => 'casaa_delete_settings_callback',
		'page arguments' => array(4),
		'access arguments' => array('administer casaa module'),
		'file' => 'casaa.delete.inc',
	);
	
	
	// AHAH callbacks
	$items['casaa_status/js'] = array(
		'page callback' => 'casaa_set_status_js',
		'access arguments' => array('access content'),
		'type' => MENU_CALLBACK,
	);
	
	return $items;
}


#################################################
# Interface theming and preprocessing functions #
#################################################

/**
 * Implementation of hook_theme
 * Register themes for the main and global pages
 * */
function casaa_theme($existing, $type, $theme, $path) {
	return array(
		'casaa_main' => array(
			'template' => 'casaa_main',
			'path' => drupal_get_path('module', 'casaa') . '/themes',
			'type' => 'module',
		),
		'casaa_global' => array(
			'template' => 'casaa_global',
			'path' => drupal_get_path('module', 'casaa') . '/themes',
			'type' => 'module',
		),
	);
}


/**
 * Implementation of template_preprocess_HOOK
 * 
 * Initialize and load the global settings form for the selected plug-in.
 * Loaded vars will be passed to the template file.
 * */
function template_preprocess_casaa_global(&$variables, $hook) {
	$variables['plugins'] = _casaa_load_plugins();
	
	// @fixme: sanitize the argument from url!!!
	// set the plugin being viewed. if not specified in the url args
	// use the first plugin in the list.
	if (arg(4)) {
		$variables['active_plugin'] = arg(4);
	}
	else {
		$variables['active_plugin'] = pos(array_keys($variables['plugins']));
	}
	if (function_exists($variables['active_plugin'] . "_global_settings_form")) {
		$variables['plugin_form'] = drupal_get_form($variables['active_plugin'] . "_global_settings_form");
	}
}

/**
 * Implementation of template_preprocess_HOOK
 * 
 * Initialize and load the main settings options for the domains
 * and their corresponding mapping values.
 * 
 * @todo: complete the integration of the domain module.
 */
function template_preprocess_casaa_main(&$variables, $hook) {
	if (module_exists('domain') && function_exists('domain_domains')) {
		$variables['domains'] = domain_domains();
		if (!arg(4)) {
			$first_dom = pos($variables['domains']);
			$variables['active_domain'] = $first_dom['domain_id'];
		}
	}
	else {
		$variables['domains'][] = array(
			'domain_id' => 0,
			'domain_name' => variable_get('site_name', ''),
		);
		$variables['active_domain'] = 0;
	}
}

/**
 * 
 */
function casaa_main_settings_page() {
	$output = '';
	$output .= theme('casaa_main');
	return $output;
}


/**
 * 
 */
function casaa_global_settings_page() {
	$output = '';
	$output = theme('casaa_global');
	return $output;
}


##############################
# Plug-in Registry Functions #
##############################

/**
 * Plug-in Registry
 * Insert the plug-in's data into the framework registry
 */
function casaa_register($plugin = array()) {
	if (!empty($plugin)) {
		_casaa_register_plugin($plugin);
	}
}

function _casaa_register_plugin($plugin) {
	if (db_query("INSERT INTO {casaa_plugin_registry} (module_file, module_name, globals) VALUE ('%s', '%s', '%s')", $plugin['module'], $plugin['name'], $plugin['globals'])) {
		drupal_set_message($plugin['name'] . " has been registered.");
		return TRUE;
	}
	else {
		drupal_set_message("Unable to register " . $plugin['name'], 'error');
		return FALSE;
	}
}



/**
 * Plug-in Un-register
 * Remove the plug-in's data from the framework registry
 */
function casaa_unregister($plugin = '') {
	if (!empty($plugin) && $plugin !== '') {
		_casaa_unregister_plugin($plugin);
	}
}

function _casaa_unregister_plugin($plugin) {
	if (db_query("DELETE FROM {casaa_plugin_registry} WHERE module_file='%s'", $plugin)) {
		drupal_set_message('Plugin successfully unregistered.');
		return TRUE;
	}
	else {
		drupal_set_message("Unable to remove plug-in from the registry!", 'error');
		return FALSE;
	}
}



######################################
# Utility and Helper Functions       #
######################################

/**
 * load the list of plug-ins and values from the registry
 */
function _casaa_load_plugins() {
	$query = db_query("SELECT * FROM {casaa_plugin_registry}");
	while ($plugin = db_fetch_object($query)) {
		$plugins[$plugin->module_file] = array(
			'name' => $plugin->module_name,
			'status' => $plugin->status,
			'globals' => $plugin->globals,
		);
	}
	return $plugins;
}

##################################################
# Global and Main Settings Management Functions  #
##################################################

/**
 * Global values save function
 */
function casaa_global_save($vals = array()) {
	if (is_array($vals) && !empty($vals)) {
		if (db_query("UPDATE {casaa_plugin_registry} SET globals='%s' WHERE module_file='%s'", serialize($vals), $vals['plugin'])) {
			drupal_set_message('Settings have been saved.');
		}
		else {
			drupal_set_message("Unable to save settings. See administrator.", 'error');
		}
	}
}

/**
 * Return the global values for the requesting plug-in.
 */
function casaa_get_global_values($plugin) {
	$query = db_query("SELECT globals FROM {casaa_plugin_registry} WHERE module_file='%s'", $plugin);
	$val = db_fetch_object($query);
	return unserialize($val->globals);
}


/**
 * Generate a simple checkbox for enabling/disabling.
 */ 
function casaa_status_form() {
	$active = arg(4);
	$plugins = _casaa_load_plugins();
	if (!$active) {
		$active = pos(array_keys($plugins));
	}

	if ($plugins[$active]['status'] == 1) {
		$title = 'Disable';
	}
	else {
		$title = 'Enable';
	}
	
	$form['plugin_status_check'] = array(
		'#type' => 'checkbox',
		'#title' => $title,
		'#default_value' => $plugins[$active]['status'],
		'#prefix' => '<div class="clear-block" id="casaa-status-wrapper">',
		'#suffix' => '</div>',
		'#ahah' => array(
			'path' => 'casaa_status/js/' . $active,
			'method' => 'replace',
			'wrapper' => 'casaa-status-wrapper',
		),
	);
	return $form;
}


/**
 * AHAH callback for status management.
 * 
 * Grab the status from the form state, update
 * the plugin status in the registry, and 
 * rebuild the form with the new status. 
 */
function casaa_set_status_js() {
	include_once 'modules/node/node.pages.inc';
	
	$form_state = array('storage' => NULL, 'submitted' => FALSE);
	$form_build_id = $_POST['form_build_id'];
	
	$form = form_get_cache($form_build_id, $form_state);
	$args = $form['#parameters'];
	$form_id = array_shift($args);
	$form_state['post'] = $form['#post'] = $_POST;
	$form['#programmed'] = $form['#redirect'] = FALSE;
	drupal_process_form($form_id, $form, $form_state);
	
	$status = $form_state['values']['plugin_status_check'];

	$active = arg(2);
	$plugins = _casaa_load_plugins();
	if (!$active) {
		$active = pos(array_keys($plugins));
	}
	
	if ($status == 1) {
		$title = 'Disable';
	}
	else {
		$title = 'Enable';
	}
	
	_casaa_set_status($active, $status);
	
	$form = drupal_rebuild_form($form_id, $form_state, $args, $form_build_id);
	
	$element['plugin_status_check'] = array(
		'#type' => 'checkbox',
		'#title' => $title,
		'#value' => $status,
		'#prefix' => '<div class="clear-block" id="casaa-status-wrapper">',
		'#suffix' => '</div>',
		'#ahah' => array(
			'path' => 'casaa_status/js/' . $active,
			'method' => 'replace',
			'wrapper' => 'casaa-status-wrapper',
		),
	);

	$output .= theme('status_messages');
	$output .= drupal_render($element);
	drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
 * Update the status in the plugin registry
 */ 
function _casaa_set_status($plugin, $status) {
	if (db_query("UPDATE {casaa_plugin_registry} SET status=%d WHERE module_file='%s'", $status, $plugin)) {
		drupal_set_message('Status updated');
	}
}

/** --------- Context Registration ----------------------- **/
/**
 * Implementation of hook_context_registry()
 * 
 * Register Our plug-in w/ the Context Module
 */ 
function casaa_context_registry() {
	$registry['conditions'] = array(
		'casaa_path_context' => array(
      'title' => t('CASAA Output On Path'),
      'description' => t('Set CASAA output on a path.'),
      'plugin' => 'casaa_path_context_condition',
    ),
		'casaa_term_context' => array(
			'title' => t('CASAA Output on a Node\'s Taxonomy Term'),
			'description' => t('Set CASAA output on a taxonomy term.'),
			'plugin' => 'casaa_term_context_condition',
		),
	);
	return $registry;
}

/**
 * Implementation of hook_context_plugins()
 * 
 * Tell the context module what and where our plug-ins
 * are.
 */ 
function casaa_context_plugins() {
	$plugins = array();
	
	$plugins['casaa_path_context_condition'] = array(
		'handler' => array(
			'path' => drupal_get_path('module', 'casaa') . '/plugins',
			'file' => 'casaa_path.context.inc',
			'class' => 'casaa_path_context_condition',
			'parent' => 'context_condition_path',
		),
	);
	$plugins['casaa_term_context_condition'] = array(
		'handler' => array(
			'path' => drupal_get_path('module', 'casaa') . '/plugins',
			'file' => 'casaa_term.context.inc',
			'class' => 'casaa_term_context_condition',
			'parent' => 'context_condition_node_taxonomy',
		),
	);
	
	return $plugins;
}
